// Code generated by protoc-gen-go.
// source: messages.proto
// DO NOT EDIT!

/*
Package iam_pb is a generated protocol buffer package.

It is generated from these files:
	messages.proto

It has these top-level messages:
	MessageCSR
	SignedMessage
*/
package iam_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MessageType int32

const (
	MessageType_MessageType_Initialize MessageType = 0
	MessageType_MessageType_MessageCSR MessageType = 1
	MessageType_MessageType_MessageCOT MessageType = 2
)

var MessageType_name = map[int32]string{
	0: "MessageType_Initialize",
	1: "MessageType_MessageCSR",
	2: "MessageType_MessageCOT",
}
var MessageType_value = map[string]int32{
	"MessageType_Initialize": 0,
	"MessageType_MessageCSR": 1,
	"MessageType_MessageCOT": 2,
}

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}
func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}
func (x *MessageType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MessageType_value, data, "MessageType")
	if err != nil {
		return err
	}
	*x = MessageType(value)
	return nil
}
func (MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Request CSR
type MessageCSR struct {
	PeerId           *string `protobuf:"bytes,1,req,name=peer_id" json:"peer_id,omitempty"`
	Cid              *string `protobuf:"bytes,2,req,name=cid" json:"cid,omitempty"`
	Op               *string `protobuf:"bytes,3,req,name=op" json:"op,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MessageCSR) Reset()                    { *m = MessageCSR{} }
func (m *MessageCSR) String() string            { return proto.CompactTextString(m) }
func (*MessageCSR) ProtoMessage()               {}
func (*MessageCSR) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MessageCSR) GetPeerId() string {
	if m != nil && m.PeerId != nil {
		return *m.PeerId
	}
	return ""
}

func (m *MessageCSR) GetCid() string {
	if m != nil && m.Cid != nil {
		return *m.Cid
	}
	return ""
}

func (m *MessageCSR) GetOp() string {
	if m != nil && m.Op != nil {
		return *m.Op
	}
	return ""
}

type SignedMessage struct {
	PeerId           *string `protobuf:"bytes,1,req,name=peer_id" json:"peer_id,omitempty"`
	Message          []byte  `protobuf:"bytes,2,req,name=message" json:"message,omitempty"`
	Signature        []byte  `protobuf:"bytes,3,req,name=signature" json:"signature,omitempty"`
	PublicKey        *string `protobuf:"bytes,4,req,name=public_key" json:"public_key,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SignedMessage) Reset()                    { *m = SignedMessage{} }
func (m *SignedMessage) String() string            { return proto.CompactTextString(m) }
func (*SignedMessage) ProtoMessage()               {}
func (*SignedMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SignedMessage) GetPeerId() string {
	if m != nil && m.PeerId != nil {
		return *m.PeerId
	}
	return ""
}

func (m *SignedMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *SignedMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *SignedMessage) GetPublicKey() string {
	if m != nil && m.PublicKey != nil {
		return *m.PublicKey
	}
	return ""
}

func init() {
	proto.RegisterType((*MessageCSR)(nil), "iam.pb.MessageCSR")
	proto.RegisterType((*SignedMessage)(nil), "iam.pb.SignedMessage")
	proto.RegisterEnum("iam.pb.MessageType", MessageType_name, MessageType_value)
}

var fileDescriptor0 = []byte{
	// 188 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0x4d, 0x2d, 0x2e,
	0x4e, 0x4c, 0x4f, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xcb, 0x4c, 0xcc, 0xd5,
	0x2b, 0x48, 0x52, 0x32, 0xe3, 0xe2, 0xf2, 0x85, 0xc8, 0x38, 0x07, 0x07, 0x09, 0xf1, 0x73, 0xb1,
	0x17, 0xa4, 0xa6, 0x16, 0xc5, 0x67, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x69, 0x70, 0x0a, 0x71, 0x73,
	0x31, 0x27, 0x03, 0x39, 0x4c, 0x60, 0x0e, 0x17, 0x17, 0x53, 0x7e, 0x81, 0x04, 0x33, 0x88, 0xad,
	0x14, 0xc1, 0xc5, 0x1b, 0x9c, 0x99, 0x9e, 0x97, 0x9a, 0x02, 0xd5, 0x8d, 0xa9, 0x15, 0x28, 0x00,
	0xb5, 0x13, 0xac, 0x9d, 0x47, 0x48, 0x90, 0x8b, 0xb3, 0x18, 0xa8, 0x25, 0xb1, 0xa4, 0xb4, 0x28,
	0x15, 0x6c, 0x0a, 0x8f, 0x10, 0xd0, 0xc8, 0x82, 0xd2, 0xa4, 0x9c, 0xcc, 0xe4, 0xf8, 0xec, 0xd4,
	0x4a, 0x09, 0x16, 0x90, 0x3e, 0xad, 0x44, 0x2e, 0x6e, 0xa8, 0x99, 0x21, 0x95, 0x05, 0xa9, 0x42,
	0x52, 0x5c, 0x62, 0x48, 0xdc, 0x78, 0xcf, 0xbc, 0xcc, 0x92, 0xcc, 0xc4, 0x9c, 0xcc, 0xaa, 0x54,
	0x01, 0x06, 0x74, 0x39, 0x84, 0x47, 0x04, 0x18, 0x71, 0xc9, 0xf9, 0x87, 0x08, 0x30, 0x01, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x96, 0x31, 0x66, 0x37, 0x0d, 0x01, 0x00, 0x00,
}
